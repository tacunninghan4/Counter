{"version":3,"sources":["InputNum.js","App.js","reportWebVitals.js","index.js"],"names":["InputNum","state","count","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","inputNum","action","class","onSubmit","this","id","type","onChange","Component","App","useState","setCount","className","onClick","c","number","parseInt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAEqBA,E,4MACjBC,MAAQ,CACJC,MAAO,I,EAEXC,aAAa,SAACC,GACV,EAAKC,SAAS,CACVH,MAAOE,EAAEE,OAAOC,S,EAGxBC,aAAa,SAACJ,GACVA,EAAEK,iBACF,EAAKC,MAAMC,SAAS,EAAKV,MAAMC,OAC/B,EAAKG,SAAS,CACVH,MAAO,M,4CAGf,WACI,OACI,uBAAMU,OAAO,GAAGC,MAAM,YAAYC,SAAUC,KAAKP,aAAcQ,GAAG,SAAlE,UACI,uBAAOC,KAAK,OAAOC,SAAUH,KAAKZ,aAAcI,MAAOQ,KAAKd,MAAMC,QAClE,kD,GApBsBiB,aC+BvBC,MA/Bd,WACC,MAA0BC,mBAAS,GAAnC,mBAAOnB,EAAP,KAAcoB,EAAd,KAeA,OACE,qBAAKC,UAAU,MAAf,SACA,sBAAKA,UAAU,YAAYP,GAAG,gBAA9B,UAGE,wBAAQQ,QAnBM,WAChBF,GAAS,SAACG,GAAD,OAAOA,EAAI,MAkBlB,uBACA,wBAAQD,QAjBM,WAChBF,GAAS,SAACG,GAAD,OAAOA,EAAI,MAgBlB,uBACA,wBAAQD,QAfE,WACZF,GAAS,SAACG,GAAD,OAAO,MAcd,mBACA,cAAC,EAAD,CAAUd,SAbG,SAACe,GAChB,IAAInB,EAAQoB,SAASD,GACrBJ,GAAS,SAACG,GAAD,OAAOA,EAAIlB,QAalB,4BAAIL,UChBK0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5a136945.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class InputNum extends Component {\r\n    state = {\r\n        count: ''\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            count: e.target.value\r\n        })\r\n    }\r\n    handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        this.props.inputNum(this.state.count)\r\n        this.setState({\r\n            count: ''\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <form action=\"\" class='container' onSubmit={this.handleSubmit} id='myForm'>\r\n                <input type=\"text\" onChange={this.handleChange} value={this.state.count} />\r\n                <button>Input</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n","import { useState } from \"react\";\r\nimport InputNum from \"./InputNum\";\r\n function App() {\r\n  const [count, setCount] = useState(0);\r\n  const increment = () => {\r\n    setCount((c) => c + 1);\r\n  };\r\n  const decrement = () => {\r\n    setCount((c) => c - 1);\r\n  };\r\n  const reset = () => {\r\n    setCount((c) => 0)\r\n  }\r\n  const inputNum = (number) => {\r\n    let value = parseInt(number)\r\n    setCount((c) => c + value)\r\n  }\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n    <div className=\"container\" id='mainContainer'>\r\n     \r\n \r\n      <button onClick={increment}>increment</button>\r\n      <button onClick={decrement}>decrement</button>\r\n      <button onClick={reset}>Reset</button> \r\n      <InputNum inputNum={inputNum}/>\r\n      {/* <button onClick={Submit}>Submit</button> */}\r\n      <p>{count}</p>\r\n       </div>\r\n    </div>\r\n  );\r\n}\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}